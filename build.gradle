//引用插件 高版本用plugins 或者 buildscripts和apply plugin结合方式（旧版本）
//父项目中使用了plugins或者buildscript+apply,可以直接在子项目中直接使用apply
plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.2.10.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//所有项目配置
allprojects {
    group = 'com.youjun'
    version = '1.0-SNAPSHOT'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

//子项目需要的配置
subprojects {
    apply plugin: 'java-library' //核心插件，无需事先引入
    apply plugin: 'org.springframework.boot' //社区插件，需要事先引入（plugins或），不必写版本号
    apply plugin: 'io.spring.dependency-management'

    bootJar {
        enabled = false
    }
    //子项目变量定义
    ext {
        encoding = 'UTF-8'
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        springBootVersion = '2.2.10.RELEASE'
        dockerImagePrefix = '1.117.230.132:5000'
        dockerfileMavenPluginVersion = '1.4.10'
        activitiDependenciesVersion = '7.1.0-M11'
        druidVersion = '1.1.23'
        hutoolVersion = '5.6.2'
        guavaVersion = '30.1.1-jre'
        swagger3Version = '3.0.0'
        pagehelperStarterVersion = '1.3.0'
        pagehelperVersion = '5.2.0'
        mybatisGeneratorVersion = '1.4.0'
        mybatisVersion = '3.5.5'
        mybatisPlusVersion = '3.4.0'
        velocityVersion = '2.2'
        mysqlConnectorVersion = '8.0.20'
        sqlserverConnectorVersion = '6.4.0.jre8'
        postgresqlVersion = '42.2.2'
        springDataCommonsVersion = '2.3.0.RELEASE'
        jjwtVersion = '0.9.0'
        aliyunOssVersion = '2.5.0'
        logstashLogbackVersion = '5.3'
        minioVersion = '7.1.0'
        gsonVersion = '2.8.5'
        weixinJavaVersion = '4.0.0'
        alipaySdkJavaVersion = '4.10.58.ALL'
        kaptchaVersion = '0.0.9'
        ehcacheVersion = '2.10.6'
        poiVersion= '5.0.0'
        dom4jVersion='2.1.3'
        jaxenVersion='1.2.0'

        commonVersion = '1.0-SNAPSHOT'
        dataApiVersion = '1.0-SNAPSHOT'
        securityVersion = '1.0-SNAPSHOT'
    }

    /* configurations {
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        all*.exclude group: 'log4j', module: 'log4j'
        compileOnly {
            extendsFrom annotationProcessor
        }
    } */

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    //子项目仓库指定
    repositories {
        mavenLocal()
        //国内阿里云镜像
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenCentral()
    }

    //引入依赖
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-jdbc"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-aop"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-websocket"
        implementation "org.springframework.boot:spring-boot-configuration-processor"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        implementation "com.google.code.gson:gson:${gsonVersion}"
        implementation "com.google.guava:guava:${guavaVersion}"
        implementation "cn.hutool:hutool-all:${hutoolVersion}"
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
    }

    // 我们生成的自定义 maven-bom
//    dependencyManagement {
//        dependencies {
//            implementation "com.youjun:common:${commonVersion}"
//            implementation "com.youjun:data-api:${dataApiVersion}"
//            implementation "com.youjun:security:${securityVersion}"
//            implementation "com.alibaba:druid-spring-boot-starter:${druidVersion}"
//            implementation "cn.hutool:hutool-all:${hutoolVersion}"
//            implementation "io.springfox:springfox-boot-starter:${swagger3Version}"
//            implementation "org.mybatis.generator:mybatis-generator-core:${mybatisGeneratorVersion}"
//            implementation "org.mybatis:mybatis:${mybatisVersion}"
//            implementation "com.github.pagehelper:pagehelper-spring-boot-starter:${pagehelperStarterVersion}"
//            implementation "com.github.pagehelper:pagehelper:${pagehelperVersion}"
//            implementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"
//            implementation "com.baomidou:mybatis-plus-generator:${mybatisPlusVersion}"
//            implementation "org.apache.velocity:velocity-engine-core:${velocityVersion}"
//            implementation "mysql:mysql-connector-java:${mysqlConnectorVersion}"
//            implementation "com.microsoft.sqlserver:mssql-jdbc:${sqlserverConnectorVersion}"
//            implementation "org.springframework.data:spring-data-commons:${springDataCommonsVersion}"
//            implementation "io.jsonwebtoken:jjwt:${jjwtVersion}"
//            implementation "com.aliyun.oss:aliyun-sdk-oss:${aliyunOssVersion}"
//            implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}"
//            implementation "io.minio:minio:${minioVersion}"
//            implementation "com.github.binarywang:weixin-java-mp:${weixinJavaVersion}"
//            implementation "com.github.binarywang:weixin-java-pay:${weixinJavaVersion}"
//            implementation "com.github.binarywang:weixin-java-miniapp:${weixinJavaVersion}"
//            implementation "com.google.guava:guava:${guavaVersion}"
//        }
//    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}
